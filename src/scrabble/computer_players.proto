syntax = "proto3";

package q2.proto;

message PredicateConfig {
    oneof predicate {
        UnseenTilesPredicateConfig unseen_tiles_predicate_config = 1;
    }
}

message UnseenTilesPredicateConfig {
    int32 min_unseen_tiles = 1;
    int32 max_unseen_tiles = 2;
}

message ComputerPlayerConfig {
    oneof player {
        PassingPlayerConfig passing_player_config = 1;
        StaticPlayerConfig static_player_config = 2;
        SpecializingPlayerConfig specializing_player_config = 3;
        EndgamePlayerConfig endgame_player_config = 4;
        AlphaBetaPlayerConfig alpha_beta_player_config = 5;
        SimmingPlayerConfig simming_player_config = 6;
    }
}

message PassingPlayerConfig {
    string name = 1;
    string nickname = 2;
    int32 id = 3;
}

message StaticPlayerConfig {
    string name = 1;
    string nickname = 2;
    int32 id = 3;
    string anagram_map_file = 4;
    string board_layout_file = 5;
    string tiles_file = 6;
    string leaves_file = 7;
}

message ConditionalPlayer {
    PredicateConfig predicate = 1;
    ComputerPlayerConfig player = 2;
}

message SpecializingPlayerConfig {
    string name = 1;
    string nickname = 2;
    int32 id = 3;
    repeated ConditionalPlayer conditional_players = 4;
}

message EndgamePlayerConfig {
    string name = 1;
    string nickname = 2;
    int32 id = 3;
    string anagram_map_file = 4;
    string board_layout_file = 5;
    string tiles_file = 6;
    string leaves_file = 7;

    int32 plies = 8;
    float leave_score_weight = 9;
    float leave_value_weight = 10;
    repeated int32 caps_per_ply = 11;
}

message AlphaBetaPlayerConfig {
    string name = 1;
    string nickname = 2;
    int32 id = 3;
    string anagram_map_file = 4;
    string board_layout_file = 5;
    string tiles_file = 6;
    string leaves_file = 7;

    int32 plies = 8;
    
    bool detect_stuck_tiles = 9;
    float stuck_tiles_left_multiplier = 10;
    float stuck_leave_score_multiplier = 11;
    float stuck_leave_value_multiplier = 12;
    float opp_stuck_score_multiplier = 13;

    float unstuck_leave_score_weight = 14;
    float unstuck_leave_value_weight = 15;

    repeated int32 caps_per_ply = 16;
}

message TileOrderings {
    repeated TileOrdering tile_orderings = 1;
}

message TileOrdering {
    string letters = 1;
    repeated uint32 exchange_insertion_dividends = 2;
}

message TileOrderingCacheConfig {
    string tiles_file = 1;
    string repeatable_orderings_file = 2;
}

message SimmingPlayerConfig {
    string name = 1;
    string nickname = 2;
    int32 id = 3;
    string anagram_map_file = 4;
    string board_layout_file = 5;
    string tiles_file = 6;
    string leaves_file = 7;
 
    int32 plies = 8;

    int32 max_plays_considered = 9;
    float static_equity_pruning_threshold = 10;

    int32 min_iterations = 11;
    int64 max_iterations = 12;
}

message ComputerPlayerCollection {
    repeated ComputerPlayerConfig players = 1;
}

message AnagramMapFileSpec {
    string anagram_map_filename = 1;
    string tiles_filename = 2;
}

message LeavesFileSpecs {
    string leaves_filename = 1;
    string tiles_filename = 2;
}

message DataCollection {
    repeated string tiles_files = 1;
    repeated AnagramMapFileSpec anagram_map_file_specs = 2;
    repeated string board_files = 3;
    repeated LeavesFileSpecs leaves_file_specs = 4;
}

message Square {
    int32 row = 1;
    int32 column = 2;
}

message Move {
  enum Action {
    PLACE = 0;
    EXCHANGE = 1;
    PASS = 2;
    OWN_DEADWOOD_PENALTY = 3;
    OPP_DEADWOOD_BONUS = 4;
  }
  enum Direction {
    NONE = 0;
    ACROSS = 1;
    DOWN = 2;
  }
  // If action is EXCHANGE, letters is the tiles exchanged.
  // If action is PLACE, letters has tiles placed on the board, with a '.'
  // corresponding to tiles already on the board and placed blank tiles
  // designated using lowercase letters.
  string letters = 1;
  string as_string = 2;
  Square start_square = 3;
  Square end_square = 4;
  Action action = 5;
  Direction direction = 6;
  int32 num_tiles = 7;
  repeated string all_words_formed = 8;
  int32 score = 9;
  float equity = 10;
  string leave = 11;
}

message GamePosition {
  int32 on_turn_player_id = 1;
  int32 opponent_player_id = 2;
  string rack = 3;
  int32 player_score = 4;
  int32 opponent_score = 5;
  int32 position_index = 6;
  int64 time_remaining_start_micros = 7;
  int32 scoreless_turns = 8;
  Move move = 9;
}

message GameResult {
    repeated int32 player_ids = 1;
    repeated int32 player_scores = 2;
    repeated string bags = 3;
    repeated string racks = 4;
    repeated GamePosition game_positions = 5;
    repeated int64 micros_used = 6;
    repeated int64 micros_remaining = 7;
}

message MirroredGamePair {
    repeated GameResult mirrored_games = 1;
}

message OutputSpec {
    bool record_bags = 1;
    bool record_racks = 2;
    bool record_game_positions = 3;
}

message TournamentSpec {
    DataCollection data_collection = 1;
    repeated ComputerPlayerConfig players = 2;
    enum TournamentFormat {
        HEADS_UP_MIRRORED_PAIRS = 0;
    }
    TournamentFormat format = 3;
    int64 number_of_rounds = 4;
    int32 number_of_threads = 5;

    // TODO: omit unrecorded data, dropping it as early as possible.
    OutputSpec output_spec = 6;  // ignored
}

message PlayerAverages {
    int32 player_id = 1;
    float average_score = 2;
    float average_opponent_score = 3;
    float average_score_difference = 4;
    float score_difference_sd = 5;
    float average_time_used_micros = 6;
    float average_time_remaining_micros = 7;
    float mirrored_score_difference_sd = 8;
    float mirrored_confidence_lower_bound = 9;
    float mirrored_confidence_upper_bound = 10;
}

message PlayerResults {
    int32 player_id = 1;
    int64 games_started = 18;
    int64 num_wins = 2;
    int64 num_losses = 3;
    int64 num_draws = 4;
    int64 total_score = 5;
    int64 total_opponent_score = 6;
    int64 score_difference_sum_of_squares = 7;
    int64 total_time_used_micros = 8;
    int64 total_time_remaining_micros = 9;

    int64 total_mirrored_difference = 17;
    int64 mirrored_sweeps = 10;
    int64 mirrored_3quart = 11;
    int64 mirrored_splits = 12;
    int64 mirrored_1quart = 13;
    int64 mirrored_sombreros = 14;
    int64 mirrored_with_difference = 15;
    int64 mirrored_score_difference_sum_of_squares = 16;
}

message TournamentResults {
    repeated GameResult game_results = 1;
    repeated MirroredGamePair mirrored_game_results = 2;
    repeated PlayerResults player_results = 3;
    repeated PlayerAverages player_averages = 4;
}